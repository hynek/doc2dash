from __future__ import annotations

import abc

from typing import ClassVar, Generator

import attrs

from bs4 import BeautifulSoup


@attrs.define(hash=True)
class TOCEntry:
    """
    A symbol entry generated by the parser and to be added to the TOC.
    """

    name: str
    type: str
    anchor: str


class IParser(metaclass=abc.ABCMeta):
    """
    A doc2dash documentation parser.
    """

    name: ClassVar[str] = NotImplemented
    doc_path: str = NotImplemented

    @staticmethod
    @abc.abstractmethod
    def detect(path: str) -> bool:
        """
        A static method that returns whether *path* can be parsed by us.
        """

    @abc.abstractmethod
    def parse(self) -> Generator[ParserEntry, None, None]:
        """
        Parse `self.doc_path`, yield a :class:`ParserEntry` for each found
        entry.
        """

    @abc.abstractmethod
    def find_and_patch_entry(
        self, soup: BeautifulSoup, entry: TOCEntry
    ) -> bool:
        """
        Modify *soup* so Dash.app can generate TOCs on the fly.

        :param soup: A soup to patch.
        :param entry: A table of contents entry that has to be patched.

        :returns: Whether an entry was patched.
        """


@attrs.define(hash=True)
class ParserEntry:
    """
    A symbol as found by the parser that get yielded for further processing.
    """

    name: str
    type: str
    path: str

    def as_tuple(self) -> tuple[str, str, str]:
        """
        Return a tuple of the data for SQL generation.
        """
        return self.name, self.type, self.path
